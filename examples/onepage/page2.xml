<document>
    <h1>PureImage</h1>

    <p>PureImage is a pure 100% JavaScript implementation of the HTML Canvas 2D drawing API for NodeJS. It has no native dependencies. You can use it to resize images, draw text, render badges, convert to grayscale, or anything else you could do with the standard Canvas 2D API. It also has additional APIs to save an image as PNG and JPEG.
    </p>

    <h1>Typescript Rewrite</h1>

    <p>As of version 0.4.* PureImage has been rewritten in 100% Typescript. The module is compiled to both Common JS and ES Modules. If it was working for you before it should still work, but if you notice anything off please file a bug report.
    </p>

    <p>Also <b>note</b> that <code>font.load()</code> now returns a promise instead of using a callback. If you need synchronous support you can still fuse <code>font.loadSync()</code>.
    </p>

    <h1>Installation</h1>

    <codeblock language="bash">
npm install pureimage
    </codeblock>

    <h1>Simple example</h1>

    <p>Make a 100x100 image, fill with red, write to png file</p>

    <codeblock language="javascript">import * as PImage from "pureimage";
import * as fs from "fs";

// make image
const img1 = PImage.make(100, 100);

// get canvas context
const ctx = img1.getContext("2d");

// fill with red
ctx.fillStyle = "red";
ctx.fillRect(0, 0, 100, 100);

//write to 'out.png'
PImage.encodePNGToStream(img1, fs.createWriteStream("out.png"))
.then(() => {
    console.log("wrote out the png file to out.png");
})
.catch((e) => {
    console.log("there was an error writing");
});
    </codeblock>

    <p>result</p>

    <image title="red square" src="./images/redsquare.png"/>

    <h2>supported Canvas Features</h2>

    <p><i>note</i>: PureImage values portability and simplicity of implementation over speed. If you need
        maximum performance you should use a different library backed by native code, such as <link
                target="https://www.npmjs.com/package/canvas">Node-Canvas</link>.
    </p>

    <ul>
        <li>set pixels</li>
        <li>stroke and fill paths (rectangles, lines, quadratic curves, bezier curves, arcs/circles)</li>
        <li>copy and scale images (nearest neighbor)</li>
        <li>import and export JPG and PNG from streams using promises</li>
        <li>render basic text (no bold or italics yet)</li>
        <li>anti-aliased strokes and fills</li>
        <li>transforms</li>
        <li>standard globalAlpha and rgba() alpha compositing</li>
        <li>clip shapes</li>
    </ul>

    <h1>On the roadmap, but still missing</h1>

    <ul>
        <li>gradients fills</li>
        <li>image fills</li>
        <li>blend modes besides SRC OVER</li>
        <li>smooth clip shapes</li>
        <li>bold/italic fonts</li>
        <li>smooth image interpolation</li>
    </ul>

    <h1>Why?</h1>

    <p>There are more than enough drawing APIs out there. Why do we need another? My
        personal hatred of C/C++ compilers is <link target="https://joshondesign.com/2014/09/17/rustlang">widely known</link>.
        The popular Node module <link target="https://github.com/Automattic/node-canvas">Canvas.js</link> does a great
        job, but it's backed by Cairo, a C/C++ layer. I hate having native dependencies
        in Node modules. They often don't compile, or break after a system update. They
        often don't support non-X86 architectures (like the Raspberry Pi). You have
        to have a compiler already installed to use them, along with any other native
        dependencies pre-installed (like Cairo).
    </p>

    <p>So, I made PureImage. Its goal is to implement the HTML Canvas spec in a headless
        Node buffer. No browser or window required.
    </p>

    <p>PureImage is meant to be a small and maintainable Canvas library.
        It is _not meant to be fast_. If there are two choices of algorithm we will
        take the one with the simplest implementation, and preferably the fewest lines.
        We avoid special cases and optimizations to keep the code simple and maintainable.
        It should run everywhere and be always produce the same output. But it will not be
        fast. If you need speed go use something else.
    </p>

    <p>PureImage uses only pure JS dependencies.
        <link target="https://github.com/nodebox/opentype.js/">OpenType</link>
        for font parsing, <link target="https://github.com/niegowski/node-pngjs">PngJS</link> for PNG import/export,
        and <link target="https://github.com/eugeneware/jpeg-js">jpeg-js</link> for JPG import/export.
    </p>

</document>
